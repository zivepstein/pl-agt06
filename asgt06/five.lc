let pair = lambda a b. lambda c. c a b;
let fst  = lambda p. p (lambda f t. f);
let snd  = lambda p. p (lambda f t. t);
let zero = lambda s z. z;
let one = lambda s z. s z;
let false = lambda s z. z;
let true = lambda s z. s;
let succ = lambda n s z. s (n s z);
let plus = lambda m n. m succ n;
let mult = lambda n m. n plus m zero;
let isZero = lambda n. n (lambda x. false) true;
let five = lambda s z. s (s ( s (s (s z))));
let pred = lambda n. snd (n (lambda p. pair (succ (fst p)) (fst p)) (pair zero zero));
let Y = lambda f. ((lambda x y. f (x x) y) (lambda x y. f (x x) y));
let fact = Y (lambda n m. (lambda x factRec.  (isZero m) n factRec (pred m) (mult m n) x));
mult five one;