let true = lambda t f. t;
let false = lambda t f. f;
let and = lambda b1 b2. b1 b2 false;
let or = lambda b1 b2. b1 true b2;
let not = lambda b. b false true;

let zero = lambda s z. z;
let succ = lambda n. lambda s z. s (n s z);

let one = succ zero;
let two = succ one;
let three = succ two;
let four = succ three;
let five = succ four;

let plus = lambda m n. m succ n;
let times = lambda m n. m (plus n) zero;
let iszero = lambda n. n (lambda x. false) true;

let pair = lambda a b. lambda c. c a b;
let fst = lambda p. p (lambda a b. a);
let snd = lambda p. p (lambda a b. b);

let pred = lambda n. snd (n (lambda p. pair (succ (fst p)) (fst p)) (pair zero zero));
let sub = lambda m n. n pred m;

let equal = lambda m n. and (iszero (sub m n)) (iszero (sub n m));

let Y = lambda f. (lambda x y. f (x x) y) (lambda x y. f (x x) y);
let fact = Y (lambda f n. (iszero n) (lambda x. succ zero) (lambda x. times n (f (pred n))) (lambda x. x));

(fact five)
